
TODO created 2/22/2016
This file contains notes about bugs and feature requests in this staged Fuzz system.


BUGS:
No known bugs.


Feature Requests:
- 2/22/2016
    When primitive functions are interpreted, they can create new terms (e.g. result terms).  However, the current implementation 
    does not carry file info into primfun interpretation, so the terms are all lacking this data.  The interpretation of primfun 
    should be updated to take a fileinfo as an argument so that produced data and error messages are better.  This will affect 
    types, interpreter, and prim (and likely some other files as a side effect).
- 2/22/2016
    Primitive function definitions are put into the program during the interpretation phase (Interpreter.lookup_prim).  This means 
    that prior to this, primfuns are reliant upon a simple string to differentiate them from each other.  Really, this string 
    should only be for debug purposes.  To fix this, I anticipate passing the primfun list to the parser and having the syntax 
    tree be constructed with primfuns directly.  This will likely affect types, parser, and interpreter (and likely some other 
    files as a side effect).
- 2/22/2016
    There are two monads used in this codebase, the checker monad for type checking and the interpreter monad for interpreting.  
    They are quite similar, but there is no monad module to allow sharing of similar functions (e.g. mapM, mapMSi, mapMTy, etc.).  
    This seems silly and rectifiable, but I don't quite know how to do it in ocaml.
- 2/22/2016
    Currently, there is no syntax support for multiplication or division of integers.  That is, one can use .+ and .- for 
    integral addition and subtraction, but one cannot use .* or ./ for multiplication or division.  This will affect 
    parser and likely little else.
- 2/23/2016
    Add better type inference.
- 4/1/2016
    During partial evaluation, do not replace let statements unless they are values



Extended Documentation for in-code comments
- 2/23/2016 FIXME in lib/primitives.fz (p_sample)
    The sample operator is currently implemented as syntax because of the lack of type inference support.  Once type inference 
    is added, this could be changed to a primitive.
- 2/23/2016 FIXME in src/interpreter.ml (goDeepUnderLambda)
    In partial evaluation, it is sometimes necessary to "peek" under lambda expressions to evaluate their bodies.  In fact, 
    because of the way that primitive functions are implemented, we sometimes wish to peek under multiple lambdas at once.  
    For instance, if an argument to a primitive function is itself a multi-argument function, then we need to peek under all 
    of the lambdas representing all of the arguments of that function to get at its core body.  This function is designed to 
    do that, but it's not clear whether it will do so in all cases.
- 2/24/2016 FIXME in src/tycheck.ml (check_sens_leq)
    We add a small constant when we check whether one sensitivity is greater than or equal to another to avoid floating 
    point issues, but this could be exploited.  It needs a better fix.
- 2/23/2016 TODO in src/math.ml
    The system may be vulnerable to floating point related attacks, and the way to address this may be to do our own 
    probability calculations (which are used for add_noise).
- 2/23/2016 TODO in src/parser.mly (extend_var)
    The Ctx module has been extended with extra support for adding variables to the context, but the parser is not yet making 
    use of this support.  Updating this shouldn't change any visible outputs, but it may make debugging the parser (after 
    future changes, say) easier.  Also, it's just a little cleaner and more elegant.
- 2/23/2016 TODO in src/parser.mly (Term: LET)
    The parser should probably throw an error if you try to write "let (x,x) = ...", but right now, it accepts it just fine.



