
TODO created 2/22/2016
This file contains notes about bugs and feature requests in this staged Fuzz system.


BUGS:
No known bugs.


Feature Requests:
- 2/22/2016
    When primitive functions are interpreted, they can create new terms (e.g. result terms).  However, the current implementation 
    does not carry file info into primfun interpretation, so the terms are all lacking this data.  The interpretation of primfun 
    should be updated to take a fileinfo as an argument so that produced data and error messages are better.  This will affect 
    types, interpreter, and prim (and likely some other files as a side effect).
- 2/22/2016
    Primitive function definitions are put into the program during the interpretation phase (Interpreter.lookup_prim).  This means 
    that prior to this, primfuns are reliant upon a simple string to differentiate them from each other.  Really, this string 
    should only be for debug purposes.  To fix this, I anticipate passing the primfun list to the parser and having the syntax 
    tree be constructed with primfuns directly.  This will likely affect types, parser, and interpreter (and likely some other 
    files as a side effect).
- 2/22/2016
    There are two monads used in this codebase, the checker monad for type checking and the interpreter monad for interpreting.  
    They are quite similar, but there is no monad module to allow sharing of similar functions (e.g. mapM, mapMSi, mapMTy, etc.).  
    This seems silly and rectifiable, but I don't quite know how to do it in ocaml.
- 2/22/2016
    Currently, there is no syntax support for multiplication or division of integers.  That is, one can use .+ and .- for 
    integral addition and subtraction, but one cannot use .* or ./ for multiplication or division.  This will affect 
    parser and likely little else.
- 2/22/2016
    Currently, there is one "primitives" fuzz module in lib, and there are multiple lib-*** fuzz modules in examples.  The 
    primitives module should be (and is) included by default, but the lib modules are not.  The lib-bags module should probably 
    be included by default (as it has a number of actual primitive functions in it), but at the very least, the lib-*** files 
    should be moved to the lib directory, and any "includes" should automatically include the lib directory in the path of 
    files searched.
- 2/23/2016
    Add better type inference.


Extended Documentation for in-code comments
- 2/23/2016 FIXME in lib/primitives.fz (p_sample)
    The sample operator is currently implemented as syntax because of the lack of type inference support.  Once type inference 
    is added, this could be changed to a primitive.
- 2/23/2016 FIXME in src/interpreter.ml (goDeepUnderLambda)
    In partial evaluation, it is sometimes necessary to "peek" under lambda expressions to evaluate their bodies.  In fact, 
    because of the way that primitive functions are implemented, we sometimes wish to peek under multiple lambdas at once.  
    For instance, if an argument to a primitive function is itself a multi-argument function, then we need to peek under all 
    of the lambdas representing all of the arguments of that function to get at its core body.  This function is designed to 
    do that, but it's not clear whether it will do so in all cases.
- 2/23/2016 FIXME in src/tycheck.ml (si_finite)
    The sensitivity rule for type checking case expressions only makes sense when the sensitivity of the value extracted from 
    the sum value is non-zero (this is r in the paper, and it is (si_lub si_x si_y) in the type_of function).  If this value 
    \emph{is} zero, we have a problem.  Therefore, I put in a hack to max this value with a small, finite number -- the idea 
    is that the result will be unchanged unless r is zero, and then it will be artificially converted to something non-zero.  
    There are two ways to deal with this hack.  1) Redo sensitivities in a pretty big way so that zero times infinity is 
    infinity (like in the paper) and fix all of the breaking repercussions this has; or 2) make a new case for the si type 
    that is SiSmallFinite or something that properly adds, multiplies, and LUBs with other sensitivities.
- 2/23/2016 TODO in src/math.ml
    The system may be vulnerable to floating point related attacks, and the way to address this may be to do our own 
    probability calculations (which are used for add_noise).
- 2/23/2016 TODO in src/parser.mly (extend_var)
    The Ctx module has been extended with extra support for adding variables to the context, but the parser is not yet making 
    use of this support.  Updating this shouldn't change any visible outputs, but it may make debugging the parser (after 
    future changes, say) easier.  Also, it's just a little cleaner and more elegant.
- 2/23/2016 TODO in src/parser.mly (Term: LET)
    The parser should probably throw an error if you try to write "let (x,x) = ...", but right now, it accepts it just fine.



