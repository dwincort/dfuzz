
/* cpp for list type */
#define list(A)     (mu XX => (() + (A, XX)))

function nil forall(A) : list(A) {
    fold[list(A)] (inl@[()]@[(A,list(A))]{()}) }

function cons forall(A) (hd :[] A) (tl :[] list(A)) : list(A) {
    fold[list(A)] (inr@[()]@[(A,list(A))]{(hd,tl)}) }

// map : (X -> Y) -> list(X) -> list(Y)
function list_map forall(X, Y) (f : X -> Y) (lm : list(X)) : list(Y) {
  case unfold lm of {
      inl(x) => nil@[Y]
    | inr(x) => let (h,t) = x;
                cons@[Y] (f h) (list_map@[X]@[Y] f t)
  }
}

// lmap : (X -o Y) -> list(X) -o list(Y)
function list_lmap forall (X, Y) (s : num) (f : X -o[[s]] Y) (l :[[s]] list(X)) : list(Y) {
  function inner (lst :[[s]] list(X)) : list(Y) {
    case unfold lst of {
        inl(_) => nil@[Y]
      | inr(x) => let (h,t) = x;
                  cons@[Y] (f h) (inner t)
    }
  }
  inner l
}

// fold : (B -o (A ->  B)) -> B -o list(A) -> B
function list_foldl forall (A, B) (f : (B -o A -o B)) (ac :[] B) (il : list(A)) : B {
  case unfold il of {
     inl(y) => ac
   | inr(y) => let (elem,rest) = y;
               list_foldl@[A]@[B] f (f ac elem) rest
  }
}

// lfold : (B -o (A -o  B)) -> B -o list(A) -> B
function list_lfoldl forall (A, B) (f : (B -o (A -o B))) (ac :[] B) (il :[] list(A)) : B {
  case unfold il of {
     inl(y) => ac
   | inr(y) => let (elem,rest) = y;
               list_lfoldl@[A]@[B] f (f ac elem) rest
  }
}

// length : list(A) -> int
function length forall (A) (l :[] list(A)) : int {
  list_lfoldl@[A]@[int] (fun (n :[] int) { fun (l :[] A ) { n .+ 1 } }) 0 l
}

// head : A -o list(A) -o A
// Returns the head of the list or the default argument.
function head forall (A) (def :[] A) (lst :[] list(A)) : A {
  case unfold lst of {
     inl(_) => def
   | inr(y) => let (elem,rest) = y;
               elem
  }
}

// tail : list(A) -> list(A)
// Returns an empty list when given an empty list.
function tail forall (A)  (il :[] list(A)) : list(A) {
  case unfold il of {
     inl(_) => nil@[A]
   | inr(y) => let (elem,rest) = y;
               rest
  }
}

// uncons : A -o list(A) -o (A, list(A))
// Returns the head of the list or the default argument.
function uncons forall (A) (def :[] A) (lst :[] list(A)) : (A, list(A)) {
  case unfold lst of {
     inl(_)   => (def, nil@[A])
   | inr(xxs) => xxs
  }
}

function performAt forall(A) (n :[] int) (f : A -o A) (l :[] list(A)) : list(A) {
  function inner (n :[] (mu X => (() + X))) (l :[] list(A)) : list(A) {
    case unfold l of {
      inl(_)   => nil@[A]
    | inr(xxs) => let (x,xs) = xxs;
                  case unfold n of {
                    inl(_)   => cons@[A] (f x) xs
                  | inr(n')  => cons@[A] x (inner n' xs)
                  }
    }
  }
  inner (intToPeano n) l
}


function zipWithS forall(A,B,C) (sens : num) (f : A -o[[sens]] B -o[[sens]] C) (l1 :[[sens]] list(A)) (l2 :[[sens]] list(B)) : list(C) {
  function inner (l1 :[[sens]] list(A)) (l2 :[[sens]] list(B)) : list(C) {
    case unfold l1 of {
      inl(x) => nil@[C]
    | inr(x) => case unfold l2 of {
                  inl(y) => nil@[C]
                | inr(y) => let (xh,xt) = x; let (yh,yt) = y;
                            cons@[C] (f xh yh) (inner xt yt)
                }
      }
  }
  inner l1 l2
}

function zipWith forall(A,B,C) (f : A -o B -o C) (l1 :[] list(A)) (l2 :[] list(B)) : list(C) {
  case unfold l1 of {
    inl(x) => nil@[C]
  | inr(x) => case unfold l2 of {
                inl(y) => nil@[C]
              | inr(y) => let (xh,xt) = x; let (yh,yt) = y;
                          cons@[C] (f xh yh) (zipWith@[A]@[B]@[C] f xt yt)
              }
    }
}

// zip : list(A) -> list(B) -> list((A,B))
// zip [1,2,3] ["a","b","c"] = [(1,"a"),(2,"b"),(3,"c")]
// zip [1,2] [9,8,7,6,5,4,3] = [(1,9),(2,8)]
// zip [9,8,7,6,5,4,3] [1,2] = [(9,1),(8,2)]
function zip forall(A,B) (l1 :[] list(A)) (l2 :[] list(B)) : list((A,B)) {
  function pair (a :[] A) (b :[] B) : (A,B) { (a,b) }
  zipWith@[A]@[B]@[(A,B)] pair l1 l2
}


// A function to append two lists.
// list_append : list(A) -o list(A) -o list(A)
function list_append
  forall(A)
  (l1 :[] list(A))
  (l2 :[] list(A)) : list(A)
{
  case (unfold l1) of {
    inl(unit) => l2
  | inr(l) => let (h,t) = l;
              cons@[A] h (list_append@[A] t l2)
  }
}

// A function to concatenate a list of lists.
// list_concat list(list(A)) -o list(A)
function list_concat
  forall(A)
  (lsts :[] list(list(A))) : list(A)
{
  case (unfold lsts) of {
    inl(unit) => nil@[A]
  | inr(p) => let (l1, lsts') = p;
              list_append@[A] l1 (list_concat@[A] lsts')
  }
}

// A list removal function
// remove : A -> list(A) -o list(A)
function remove
  forall(A)
  (elem : A)
  (lst :[] list(A))
  : list(A)
  {
    case (unfold lst) of {
      inl(_)    => nil@[A]
    | inr(xxs)  => let (x,xs) = xxs;
                   if (x == elem) then { xs }
                                  else { cons@[A] x ((remove@[A] elem xs)) }
    }
  }

// An indexing function for lists.
function index
  forall(A)
  (def :[] A)
  (ind : int)
  (lst :[] list(A))
  : A {
    case (unfold lst) of {
      inl(_)    => def
    | inr(xxs)  => let (x,xs) = xxs;
                   if (ind == 0) then { x }
                                 else { index@[A] def (ind .- 1) xs }
    }
}

function vectorMap
  forall(A,B)
  (s : num)
  (k : int)
  (def : A)
  (f :[[k]] A -o[[s]] B)
  (l :[[max (s,k)]] list(A))
  : list(B) {
    if k <= 0 then {
      nil@[B]
    } else {
      let (x,xs) = uncons@[A] def l;
      cons@[B] (f x) (vectorMap@[A]@[B] s (k .- 1) def f xs)
    }
}



// // insertion sort
// function cswp (e :[] (num, num)) : (num, num) {
//   let (x,y) = e;
//   if (x < y) then {
//     (x, y)
//   } else {
//     (y, x)
//   }
// }
// 
// function insSort (input:[] list(num)) : list(num) {
// 
//   function insert (y:[] num) (l : [] list(num)) : list(num){
//     case unfold l of {
//         inl(unit) => cons@[num] y (nil@[num])
//       | inr(x)    => let (h,t) = x;
//                      let (a,b) = cswp (y,h);
//                      cons@[num] a (insert b t)
//     }
//   }
// 
//   case unfold input of {
//       inl(unit) => nil@[num]
//     | inr(x)    => let (h,t)= x;
//                    insert h (insSort t)
//   }
// }

////////////////////////////////////////////////////////////////
/* Monadic lists over the probability monad */

#define flist(A)     (mu X => (() + (fuzzy A, X)))
#define finner(A)    (() + (fuzzy A, flist(A)))
#define fnil(A)      (fold[flist(A)] (inl{()}))
#define fcons(A,a,b) (fold[flist(A)] (inr{(a, b)}))

// listfuzz : flist(num) -o fuzzy list(num) [like mapM]
function listfuzz (fl :[] flist(num)) : fuzzy list(num) {
  case unfold fl of {
      inl(x) => return nil@[num]
    | inr(x) =>
        let (lhead, ltail) = x;
        sample y = lhead;
        sample tailsample = listfuzz ltail;
        return (cons@[num] y (tailsample))
  }
}

function showList 
  forall(A) 
  (pA : A -> string) 
  (lst : list(A)) 
  : string {
    function showListHelper (lst : list(A)) : string {
        case unfold lst of {
          inl(_) => "]"
        | inr(xxs) => let (x,xs) = xxs;
                      ","^(pA x)^(showListHelper xs)
        }
    }
    case unfold lst of {
      inl(_) => "[]"
    | inr(xxs) => let (x,xs) = xxs;
                  "["^(pA x)^(showListHelper xs)
    }
}

/*
  listFromFile : string -> list(DATA)
  
  Given a file name, loads the data in the file into a list
*/
primitive listFromFile forall(DATA) (file : string) : list(DATA) { "listFromFile" }


