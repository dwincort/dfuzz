
// Testing out partial evaluation and sensitivities with simple terms in them.


function test1 (x : num) : string {
  function fuzzyConstMult (eps : num) (c : num) (n :[[eps * c]] num) : fuzzy num {
    add_noise eps (const_mult c n)
  }
  rz = runFuzz'@[num]@[num] 3.0 (fuzzyConstMult 1.0 x);
  case rz of {
    inl(s) => "error"
  | inr(z) => if (op_abs (x * 100.0 - z)) < 10.0 then {"succ"} else {"fail"}
  }
}

function test2 (x : num) : string {
  function foo (c : num) (n :[[c]] num) : fuzzy () {
    x = assert (showNum n) true;
    return x
  }
  rz = runFuzz'@[num]@[()] 3.0 (foo x);
  case rz of {
    inl(s) => "error"
  | inr(unit) => "unit"
  }
}

loadDB@[num] 100.0 3.5;
assertEq@[string] "Partial evaluation and simple sensitivity terms #1" (test1 1.0) "succ";
assertEq@[num]    "Partial evaluation and simple sensitivity terms #2" (getEpsilon ()) 2.5;
assertEq@[string] "Partial evaluation and simple sensitivity terms #3" (test1 2.5) "succ";
assertEq@[num]    "Partial evaluation and simple sensitivity terms #4" (getEpsilon ()) 0.0;
assertEq@[string] "Partial evaluation and simple sensitivity terms #5" (test1 0.5) "error";
assertEq@[num]    "Partial evaluation and simple sensitivity terms #6" (getEpsilon ()) 0.0;
loadDB@[num] 100.0 8.0;
assertEq@[string] "Partial evaluation and simple sensitivity terms #7" (test1 3.1) "error";
assertEq@[num]    "Partial evaluation and simple sensitivity terms #8" (getEpsilon ()) 8.0;
assertEq@[string] "Partial evaluation and simple sensitivity terms #9" (test2 2.0) "error";

