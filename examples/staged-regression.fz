

// Include the bags libraries (lists is included with this).
#include "library-bags.fz"

/*
A database row is a list of clipped nums.  The 0-indexed value is 
the label, and the parameters are indexed 1 through k.
*/



typedef nlist = list(num);
typedef clist = list(clipped);
typedef cvec = clipped vector;
typedef nvec = num vector;
typedef db = (clipped, cvec) bag;

absum = fun (l : list(num)) : num { list_lfoldl@[num]@[num] (fun (accum :[] num) { fun (x :[] num ) { accum + (op_abs x) } }) 0 l };
vabsum = fun (v : nvec) : num { vsum (vmap@[num]@[num] op_abs v) };


function replicate forall(A) (x : A) (n : int) : list(A) {
  if n <= 0 then { nil@[A] } else { cons@[A] x (replicate@[A] x (n .- 1)) }
}

function count (start : int) (end : int) : int bag {
  if start > end then {
    emptybag@[int]
  } else {
    addtobag@[int] start (count (start .+ 1) end)
  }
}




function rowop
  (theta : nvec)
  (row : (clipped, cvec))
  : cvec {
    let (y,rlst) = row;
    mew = clip (vectorIP theta rlst);
    // 0 <= mew <= 1
    // -1 <= y - mew <= 1
    res = vmap@[clipped]@[clipped] (fun (x : clipped) : clipped { 
        temp = (fromClip y - mew) * (fromClip x);
        clip ((temp + 1) / 2)
    }) rlst;
//     debug (showVec (vmap@[clipped]@[string] showClipped rlst));
//     debug (showVec (vmap@[clipped]@[string] showClipped res));
    res
}
  

function stagewiseRed
  (eps : num)
  (eta : num)
  (threshold : num)
  (beta : nvec)
  (db :[[eps]] db)
  : fuzzy nvec {
    len = vsize@[num] beta;
    betanorm = vabsum beta;
    
    // We do a preprocessing step in the exponential mechanism to improve runtime.
    preprocess = fun (db :[[2]] db) : (int, cvec bag) {
      n = bagsize@[(clipped, cvec)] db;
      b = bagmap@[(clipped, cvec)]@[cvec] (rowop beta) db;
      (n,b)
    };
    
    // This function will be what we pass to the exponential mechanism to calculate 
    // the quality sccores for the parameters.
    quality = fun (r : int) { fun (nb :[[3]] (int, cvec bag)) : num {
      if r < 0 then {
        threshold
      } else {
        let (n,b) = nb;
        res1 = bagsum (bagmap@[cvec]@[clipped] (vindex@[clipped] (clip (0.5)) r) b);
        (scale 2 res1) - n
      }
    }};
    // The indexes plus a -1 value for the threshold
    rbag = count (0 .- 1) len;
    // Run the exponential mechanism.
    sample jcj = expMechPreWithScore@[int]@[db]@[(int, cvec bag)] 
        (eps/2) 2 3 preprocess quality rbag db;
    // The result is both the index j and the value of c at j.
    let (j,cj) = jcj;
    if (j < 0) then {
      return beta
    } else {
      signedconstant = if cj > 0 then { eta } else { 0 - eta };
      return (vperformAt@[num] j (op_add signedconstant) beta)
    }
}

function stagewiseGreen
  (eps : num)
  (eta : num)
  (threshold : num)
  (beta : nlist)
  : string {
    e = getEpsilon ();
    print ("We have "^showNum e^"*ε budget remaining and have so far produced beta="^showList@[num] showNum beta);
    betanorm = absum beta;
    rz = runFuzz'@[db]@[nvec] eps (stagewiseRed eps eta threshold (listToVector@[num] beta));
    case rz of {
      inl(s) => s
    | inr(beta') =>
        beta' = vectorToList@[num] beta';
        if (beta == beta') then { showList@[num] showNum beta }
                           else { stagewiseGreen eps eta threshold beta' }
    }
}



function dbRowSetup (v : cvec) : (clipped, cvec) {
    let (y,cs) = vuncons@[clipped] (clip 0) v;
    y' = if y < 0.125 then { clip 0 } else { clip 1 };
    (y',cs)
}

// WHITE ZONE
function main (dbMaxSize : int) (eps : num) (fn : string) : string {
  db = fun (u:()) {(db = vectorbagFromFile dbMaxSize fn "[ \\t]+";
        db = bagmap@[cvec]@[(clipped,cvec)] dbRowSetup db;
        db)};
  loadDB@[db] db (10000, 0.001);
  dbsize = dbMaxSize;
  cutoff = 0.005;
  eta = 0.01;
  print "Stagewise Regression";
  print ("ε per iteration = "^showNum eps);
  print ("dbsize = "^showNum dbsize);
  print ("cutoff = "^showNum cutoff);
  print ("eta = "^showNum eta);
  print ("Labels *are* being set to 0 for <50k and 1 for greater.");
  beta = replicate@[num] 0.0 145;
  stagewiseGreen eps eta (dbsize * cutoff) beta
}
main

