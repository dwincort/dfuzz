

// Include the bags libraries (lists is included with this).
#include "library-bags.fz"

/*
A database row is a list of clipped nums.  The 0-indexed value is 
the label, and the parameters are indexed 1 through k.
*/



typedef nlist = list(num);
typedef clist = list(clipped);
typedef db = (clipped, clist) bag;

absum = fun (l : list(num)) : num { list_lfoldl@[num]@[num] (fun (accum :[] num) { fun (x :[] num ) { accum + (op_abs x) } }) 0 l };


function replicate forall(A) (x : A) (n : int) : list(A) {
  if n <= 0 then { nil@[A] } else { cons@[A] x (replicate@[A] x (n .- 1)) }
}


// Inner Product with a Fixed length and a Constant first list
function innerProdFC
  (v1 : list(num))
  (v2 :[[absum v1]] list(num))
  : num {
    case unfold v1 of {
      inl(_) => 0.0
    | inr(nns) => let (n,ns) = nns;
                  let (c,cs) = uncons@[num] 0.0 v2;
                  ipres = (scale n c) + (innerProdFC ns cs);
                  ipres
    }
}

      

function pairWithCount
  forall(A)
  (n : int)
  (lst :[] list(A))
  : list((int,A)) {
  case unfold lst of {
    inl(_)   => nil@[(int,A)]
  | inr(xxs) => let (x,xs) = xxs;
                cons@[(int,A)] (n,x) (pairWithCount@[A] (n .+ 1) xs)
  }
}

function rowop
  (beta : nlist)
  (accum :[] nlist)
  (row :[[3 * (1 + absum beta)]] (clipped, clist))
  : nlist {
    let (y,rlst) = row;
    mew = innerProdFC beta rlst;
    c = vectorMap@[clipped]@[num] 2 3 (clip 0) (fun (x :[2] clipped) : num { 
            fromClip (clip_mult x y) - (clip_scale x mew)
            //(fromClip y - mew) * (fromClip x) 
        }) rlst;
    zipWith@[num]@[num]@[num] op_add accum c
}
  
function stagewiseRed
  (eps : num)
  (smallconstant : num)
  (dbSize : int)
  (threshold : num)
  (beta : nlist)
  (db :[[eps]] db)
  : fuzzy clist {
    // We need a list of zeros to begin accumulating the values we need
    //zeros = list_map@[num]@[num] (fun (x : num) : num { 0.0 }) beta;
    zeros = replicate@[num] 0.0 (length@[num] beta);
    // This function f will be what we pass to the exponential mechanism
    f = fun (db :[[eps]] db) : (((int,num),num) bag) {
      // The main operation is a fold over the database using the above "rowop" function
      res = bagfoldl@[(clipped, clist)]@[nlist] (3 * (1 + absum beta))
            (rowop beta)
            zeros
            db;
      // Get the average value of each column.  Start by summing them.
      sumVals = bagfoldl@[clist]@[nlist] 1 (zipWith@[num]@[clipped]@[num] op_add)
            zeros
            (bagmapins@[(clipped, clist)]@[clist] (fun (ccs : (clipped, clist)) {let (_,cs) = ccs; cs}) db);
      // Now divide by the number of rows in the database
      averageVals = list_lmap@[num]@[num] (1 / dbSize) (scale (1 / dbSize)) sumVals;
      // And subtract the averages.
      res = zipWith@[num]@[num]@[num] op_sub res averageVals;
      // The result of the fold is the current correlation vector c.  We pair each value with its index.
      res = pairWithCount@[num] 0 res;
      // We massage the data into a proper form for the expMechOnePass function.
      res = list_lmap@[(int,num)]@[((int,num),num)] 2 (fun (xy :[2] (int,num)) : ((int,num),num) { let (i,n) = xy; ((i,n),op_abs n) }) res;
      // Convert the result to a bag and add the threshold value
      res = addtobag@[((int,num),num)] ((0 .- 1,threshold), threshold) (listtobag@[((int,num),num)] res);
      // return it in the probability monad.
      res };
    // Run the exponential mechanism.
    sample jcj = expMechOnePass@[(int,num)]@[db] eps f db;
    // The result is both the index j and the value of c at j.
    let (j,cj) = jcj;
    if (j < 0) then {
      return beta
    } else {
      signedconstant = if cj > 0 then { smallconstant } else { 0 - smallconstant };
      return (performAt@[num] j (op_add signedconstant) beta)
    }
}

function stagewiseGreen
  (eps : num)
  (smallconstant : num)
  (dbSize : int)
  (threshold : num)
  (beta : nlist)
  : string {
    e = getEpsilon ();
    print ("We have "^showNum e^"*Îµ budget remaining and have so far produced beta="^showList@[num] showNum beta);
    eps' = eps * (2 + 2 * (3 * (1 + absum beta)));
    rz = runFuzz'@[db]@[nlist] eps' (stagewiseRed eps' smallconstant dbSize threshold beta);
    case rz of {
      inl(s) => s
    | inr(beta') =>
        if (beta == beta') then { showList@[num] showNum beta }
                           else { stagewiseGreen eps smallconstant dbSize threshold beta' }
    }
}




db = (db = listbagFromFile@[num] "examples/data/baglist2.dat";
      db = bagmapins@[nlist]@[clist]
            (fun (l : nlist) : clist {
              list_map@[num]@[clipped] (fun (x : num) : clipped { clip (x / 10.0) }) l}) db;
      bagmapins@[clist]@[(clipped,clist)] (uncons (clip 0.0)) db);


// WHITE ZONE
loadDB@[db] db 300;
dbSize = bagsize@[(clipped,clist)] db;
stagewiseGreen 1 0.1 dbSize 0.05 (replicate@[num] 0.0 3)



